import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const generateStyledImage = async (
  base64ImageData: string,
  mimeType: string,
  styles: string[]
): Promise<string> => {
  const prompt = `Recreate this image in the combined artistic styles of: ${styles.join(', ')}. Focus on merging the aesthetic qualities of these styles into a cohesive and visually stunning new image. Do not include any text in the output image.`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    if (response?.candidates?.[0]?.content?.parts) {
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          return part.inlineData.data;
        }
      }
    }
    
    // Check for safety ratings or other reasons for no image
    if (response?.candidates?.[0]?.finishReason !== 'STOP') {
        throw new Error(`Image generation stopped due to: ${response?.candidates?.[0]?.finishReason}. Please adjust your image or prompt.`);
    }

    throw new Error("No image was generated by the API. The prompt may have been blocked or the model could not produce an output.");
  } catch (error) {
    console.error("Gemini API call failed:", error);
    throw new Error("Failed to generate image. Please check the console for more details.");
  }
};
